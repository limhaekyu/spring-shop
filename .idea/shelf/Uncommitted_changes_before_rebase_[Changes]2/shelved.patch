Index: src/main/java/com/example/springshop/process/domain/questions/service/QuestionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.springshop.process.domain.questions.service;\n\nimport com.example.springshop.process.domain.questions.domain.Questions;\nimport com.example.springshop.process.domain.questions.dto.AddQuestionDto;\nimport com.example.springshop.process.domain.questions.repository.QuestionRepository;\nimport com.example.springshop.process.domain.user.domain.User;\nimport com.example.springshop.process.domain.user.service.UserService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\n@RequiredArgsConstructor\npublic class QuestionService {\n\n    private final QuestionRepository questionRepository;\n    private final UserService userService;\n\n    public void addQuestion(Long id, AddQuestionDto addQuestionDto) {\n        User user = userService.findUserById(id);\n        Questions questions = new Questions(addQuestionDto.getQuestionTitle(), addQuestionDto.getQuestionContents(), user);\n        questionRepository.save(questions);\n    }\n\n    public List<Questions> selectAllQuestion() {\n        List<Questions> allQuestionList = questionRepository.findAll();\n        return allQuestionList;\n    }\n\n    public List<Questions> selectUserQuestion(Long id) {\n        User user = userService.findUserById(id);\n        List<Questions> userQuestionList = questionRepository.findAllByUser(user);\n        return userQuestionList;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/springshop/process/domain/questions/service/QuestionService.java b/src/main/java/com/example/springshop/process/domain/questions/service/QuestionService.java
--- a/src/main/java/com/example/springshop/process/domain/questions/service/QuestionService.java	(revision 17ecd7b934b111d00c14cedbcddbd484510a590d)
+++ b/src/main/java/com/example/springshop/process/domain/questions/service/QuestionService.java	(date 1656755996357)
@@ -33,4 +33,6 @@
         List<Questions> userQuestionList = questionRepository.findAllByUser(user);
         return userQuestionList;
     }
+
+
 }
Index: src/main/java/com/example/springshop/process/domain/questions/controller/QuestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.springshop.process.domain.questions.controller;\n\nimport com.example.springshop.process.domain.questions.domain.Questions;\nimport com.example.springshop.process.domain.questions.dto.AddQuestionDto;\nimport com.example.springshop.process.domain.questions.service.QuestionService;\nimport com.example.springshop.process.global.response.ApiResponseDto;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequiredArgsConstructor\npublic class QuestionController {\n    private final QuestionService questionService;\n\n    // CRUD\n\n    @PostMapping(\"/api/shop/{id}/question\")\n    public void addQuestion(@PathVariable Long id, @RequestBody AddQuestionDto addQuestionDto){\n        questionService.addQuestion(id, addQuestionDto);\n    }\n\n    @GetMapping(\"api/shop/question\")\n    public ApiResponseDto<List<Questions>> selectAllQuestion(){\n        List<Questions> allQuestionList = questionService.selectAllQuestion();\n        return ApiResponseDto.of(allQuestionList);\n    }\n\n    @GetMapping(\"api/shop/{id}/question\")\n    public ApiResponseDto<List<Questions>> selectUserQuestion(@PathVariable Long id){\n        List<Questions> userQuestionList = questionService.selectUserQuestion(id);\n        return ApiResponseDto.of(userQuestionList);\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/springshop/process/domain/questions/controller/QuestionController.java b/src/main/java/com/example/springshop/process/domain/questions/controller/QuestionController.java
--- a/src/main/java/com/example/springshop/process/domain/questions/controller/QuestionController.java	(revision 17ecd7b934b111d00c14cedbcddbd484510a590d)
+++ b/src/main/java/com/example/springshop/process/domain/questions/controller/QuestionController.java	(date 1656755996360)
@@ -2,6 +2,7 @@
 
 import com.example.springshop.process.domain.questions.domain.Questions;
 import com.example.springshop.process.domain.questions.dto.AddQuestionDto;
+import com.example.springshop.process.domain.questions.dto.UpdateQuestionDto;
 import com.example.springshop.process.domain.questions.service.QuestionService;
 import com.example.springshop.process.global.response.ApiResponseDto;
 import lombok.RequiredArgsConstructor;
@@ -16,9 +17,9 @@
 
     // CRUD
 
-    @PostMapping("/api/shop/{id}/question")
-    public void addQuestion(@PathVariable Long id, @RequestBody AddQuestionDto addQuestionDto){
-        questionService.addQuestion(id, addQuestionDto);
+    @PostMapping("/api/shop/{userId}/question")
+    public void addQuestion(@PathVariable Long userId, @RequestBody AddQuestionDto addQuestionDto){
+        questionService.addQuestion(userId, addQuestionDto);
     }
 
     @GetMapping("api/shop/question")
@@ -27,11 +28,18 @@
         return ApiResponseDto.of(allQuestionList);
     }
 
-    @GetMapping("api/shop/{id}/question")
-    public ApiResponseDto<List<Questions>> selectUserQuestion(@PathVariable Long id){
-        List<Questions> userQuestionList = questionService.selectUserQuestion(id);
+    @GetMapping("api/shop/{userId}/question")
+    public ApiResponseDto<List<Questions>> selectUserQuestion(@PathVariable Long userId){
+        List<Questions> userQuestionList = questionService.selectUserQuestion(userId);
         return ApiResponseDto.of(userQuestionList);
     }
 
+    @PutMapping("api/shop/{userId}/question")
+    public void updateUserQuestion(@PathVariable Long userId ,@RequestParam Long questionId , @RequestBody UpdateQuestionDto updateQuestionDto){
+
+        questionService.updateQuestion(userId, questionId, updateQuestionDto);
+
+    }
+
 
 }
